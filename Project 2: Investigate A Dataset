
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project: Investigating Production Company, Budget, Popularity and Vote Count Imdb Movie Dataset \n",
    "\n",
    "\n",
    "## Table of Contents\n",
    "<ul>\n",
    "<li><a href=\"#intro\">Introduction</a></li>\n",
    "<li><a href=\"#wrangling\">Data Wrangling</a></li>\n",
    "<li><a href=\"#eda\">Exploratory Data Analysis</a></li>\n",
    "<li><a href=\"#conclusions\">Conclusions</a></li>\n",
    "</ul>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='intro'></a>\n",
    "## Introduction\n",
    "\n",
    "> **In this report TMDb Movies dataset will be analyzed.\n",
    "\n",
    ">Data will be cleaned first, irrelevant columns will be dropped and then there will be another iteration to analyze production companies due to multiple entries of production company name in one cell\n",
    "\n",
    " \n",
    ">This data set contains information about 10 thousand movies collected from The Movie Database (TMDb), including user ratings and revenue. It consist of 21 columns such as imdb_id, revenue, budget, vote_count etc. \n",
    "#### **Question that can analyised from this data set**\n",
    "> Which companies produces the most popular movies?\n",
    "\n",
    ">Is there any relationship between popularity and budget adj if so how?\n",
    "\n",
    ">Is there any relationship between popularity and mean budget_adj, and vote count?\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='wrangling'></a>\n",
    "## Data Wrangling\n",
    "\n",
    "> **Tip**: In this section of the report, you will load in the data, check for cleanliness, and then trim and clean your dataset for analysis. Make sure that you document your steps carefully and justify your cleaning decisions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Use this cell to set up import statements for all of the packages that you\n",
    "#   plan to use.\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sbs\n",
    "%matplotlib inline\n",
    "import datetime\n",
    "df= pd.read_csv('tmdb-movies (3).csv')\n",
    "\n",
    "# Remember to include a 'magic word' so that your visualizations are plotted\n",
    "#   inline with the notebook. See this page for more:\n",
    "#   http://ipython.readthedocs.io/en/stable/interactive/magics.html\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### General Properties"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>imdb_id</th>\n",
       "      <th>popularity</th>\n",
       "      <th>budget</th>\n",
       "      <th>revenue</th>\n",
       "      <th>original_title</th>\n",
       "      <th>cast</th>\n",
       "      <th>homepage</th>\n",
       "      <th>director</th>\n",
       "      <th>tagline</th>\n",
       "      <th>...</th>\n",
       "      <th>overview</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genres</th>\n",
       "      <th>production_companies</th>\n",
       "      <th>release_date</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>vote_average</th>\n",
       "      <th>release_year</th>\n",
       "      <th>budget_adj</th>\n",
       "      <th>revenue_adj</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>135397</td>\n",
       "      <td>tt0369610</td>\n",
       "      <td>32.985763</td>\n",
       "      <td>150000000</td>\n",
       "      <td>1513528810</td>\n",
       "      <td>Jurassic World</td>\n",
       "      <td>Chris Pratt|Bryce Dallas Howard|Irrfan Khan|Vi...</td>\n",
       "      <td>http://www.jurassicworld.com/</td>\n",
       "      <td>Colin Trevorrow</td>\n",
       "      <td>The park is open.</td>\n",
       "      <td>...</td>\n",
       "      <td>Twenty-two years after the events of Jurassic ...</td>\n",
       "      <td>124</td>\n",
       "      <td>Action|Adventure|Science Fiction|Thriller</td>\n",
       "      <td>Universal Studios|Amblin Entertainment|Legenda...</td>\n",
       "      <td>6/9/15</td>\n",
       "      <td>5562</td>\n",
       "      <td>6.5</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.379999e+08</td>\n",
       "      <td>1.392446e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>76341</td>\n",
       "      <td>tt1392190</td>\n",
       "      <td>28.419936</td>\n",
       "      <td>150000000</td>\n",
       "      <td>378436354</td>\n",
       "      <td>Mad Max: Fury Road</td>\n",
       "      <td>Tom Hardy|Charlize Theron|Hugh Keays-Byrne|Nic...</td>\n",
       "      <td>http://www.madmaxmovie.com/</td>\n",
       "      <td>George Miller</td>\n",
       "      <td>What a Lovely Day.</td>\n",
       "      <td>...</td>\n",
       "      <td>An apocalyptic story set in the furthest reach...</td>\n",
       "      <td>120</td>\n",
       "      <td>Action|Adventure|Science Fiction|Thriller</td>\n",
       "      <td>Village Roadshow Pictures|Kennedy Miller Produ...</td>\n",
       "      <td>5/13/15</td>\n",
       "      <td>6185</td>\n",
       "      <td>7.1</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.379999e+08</td>\n",
       "      <td>3.481613e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>262500</td>\n",
       "      <td>tt2908446</td>\n",
       "      <td>13.112507</td>\n",
       "      <td>110000000</td>\n",
       "      <td>295238201</td>\n",
       "      <td>Insurgent</td>\n",
       "      <td>Shailene Woodley|Theo James|Kate Winslet|Ansel...</td>\n",
       "      <td>http://www.thedivergentseries.movie/#insurgent</td>\n",
       "      <td>Robert Schwentke</td>\n",
       "      <td>One Choice Can Destroy You</td>\n",
       "      <td>...</td>\n",
       "      <td>Beatrice Prior must confront her inner demons ...</td>\n",
       "      <td>119</td>\n",
       "      <td>Adventure|Science Fiction|Thriller</td>\n",
       "      <td>Summit Entertainment|Mandeville Films|Red Wago...</td>\n",
       "      <td>3/18/15</td>\n",
       "      <td>2480</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.012000e+08</td>\n",
       "      <td>2.716190e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>140607</td>\n",
       "      <td>tt2488496</td>\n",
       "      <td>11.173104</td>\n",
       "      <td>200000000</td>\n",
       "      <td>2068178225</td>\n",
       "      <td>Star Wars: The Force Awakens</td>\n",
       "      <td>Harrison Ford|Mark Hamill|Carrie Fisher|Adam D...</td>\n",
       "      <td>http://www.starwars.com/films/star-wars-episod...</td>\n",
       "      <td>J.J. Abrams</td>\n",
       "      <td>Every generation has a story.</td>\n",
       "      <td>...</td>\n",
       "      <td>Thirty years after defeating the Galactic Empi...</td>\n",
       "      <td>136</td>\n",
       "      <td>Action|Adventure|Science Fiction|Fantasy</td>\n",
       "      <td>Lucasfilm|Truenorth Productions|Bad Robot</td>\n",
       "      <td>12/15/15</td>\n",
       "      <td>5292</td>\n",
       "      <td>7.5</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.839999e+08</td>\n",
       "      <td>1.902723e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>168259</td>\n",
       "      <td>tt2820852</td>\n",
       "      <td>9.335014</td>\n",
       "      <td>190000000</td>\n",
       "      <td>1506249360</td>\n",
       "      <td>Furious 7</td>\n",
       "      <td>Vin Diesel|Paul Walker|Jason Statham|Michelle ...</td>\n",
       "      <td>http://www.furious7.com/</td>\n",
       "      <td>James Wan</td>\n",
       "      <td>Vengeance Hits Home</td>\n",
       "      <td>...</td>\n",
       "      <td>Deckard Shaw seeks revenge against Dominic Tor...</td>\n",
       "      <td>137</td>\n",
       "      <td>Action|Crime|Thriller</td>\n",
       "      <td>Universal Pictures|Original Film|Media Rights ...</td>\n",
       "      <td>4/1/15</td>\n",
       "      <td>2947</td>\n",
       "      <td>7.3</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.747999e+08</td>\n",
       "      <td>1.385749e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       id    imdb_id  popularity     budget     revenue  \\\n",
       "0  135397  tt0369610   32.985763  150000000  1513528810   \n",
       "1   76341  tt1392190   28.419936  150000000   378436354   \n",
       "2  262500  tt2908446   13.112507  110000000   295238201   \n",
       "3  140607  tt2488496   11.173104  200000000  2068178225   \n",
       "4  168259  tt2820852    9.335014  190000000  1506249360   \n",
       "\n",
       "                 original_title  \\\n",
       "0                Jurassic World   \n",
       "1            Mad Max: Fury Road   \n",
       "2                     Insurgent   \n",
       "3  Star Wars: The Force Awakens   \n",
       "4                     Furious 7   \n",
       "\n",
       "                                                cast  \\\n",
       "0  Chris Pratt|Bryce Dallas Howard|Irrfan Khan|Vi...   \n",
       "1  Tom Hardy|Charlize Theron|Hugh Keays-Byrne|Nic...   \n",
       "2  Shailene Woodley|Theo James|Kate Winslet|Ansel...   \n",
       "3  Harrison Ford|Mark Hamill|Carrie Fisher|Adam D...   \n",
       "4  Vin Diesel|Paul Walker|Jason Statham|Michelle ...   \n",
       "\n",
       "                                            homepage          director  \\\n",
       "0                      http://www.jurassicworld.com/   Colin Trevorrow   \n",
       "1                        http://www.madmaxmovie.com/     George Miller   \n",
       "2     http://www.thedivergentseries.movie/#insurgent  Robert Schwentke   \n",
       "3  http://www.starwars.com/films/star-wars-episod...       J.J. Abrams   \n",
       "4                           http://www.furious7.com/         James Wan   \n",
       "\n",
       "                         tagline  ...  \\\n",
       "0              The park is open.  ...   \n",
       "1             What a Lovely Day.  ...   \n",
       "2     One Choice Can Destroy You  ...   \n",
       "3  Every generation has a story.  ...   \n",
       "4            Vengeance Hits Home  ...   \n",
       "\n",
       "                                            overview runtime  \\\n",
       "0  Twenty-two years after the events of Jurassic ...     124   \n",
       "1  An apocalyptic story set in the furthest reach...     120   \n",
       "2  Beatrice Prior must confront her inner demons ...     119   \n",
       "3  Thirty years after defeating the Galactic Empi...     136   \n",
       "4  Deckard Shaw seeks revenge against Dominic Tor...     137   \n",
       "\n",
       "                                      genres  \\\n",
       "0  Action|Adventure|Science Fiction|Thriller   \n",
       "1  Action|Adventure|Science Fiction|Thriller   \n",
       "2         Adventure|Science Fiction|Thriller   \n",
       "3   Action|Adventure|Science Fiction|Fantasy   \n",
       "4                      Action|Crime|Thriller   \n",
       "\n",
       "                                production_companies release_date vote_count  \\\n",
       "0  Universal Studios|Amblin Entertainment|Legenda...       6/9/15       5562   \n",
       "1  Village Roadshow Pictures|Kennedy Miller Produ...      5/13/15       6185   \n",
       "2  Summit Entertainment|Mandeville Films|Red Wago...      3/18/15       2480   \n",
       "3          Lucasfilm|Truenorth Productions|Bad Robot     12/15/15       5292   \n",
       "4  Universal Pictures|Original Film|Media Rights ...       4/1/15       2947   \n",
       "\n",
       "   vote_average  release_year    budget_adj   revenue_adj  \n",
       "0           6.5          2015  1.379999e+08  1.392446e+09  \n",
       "1           7.1          2015  1.379999e+08  3.481613e+08  \n",
       "2           6.3          2015  1.012000e+08  2.716190e+08  \n",
       "3           7.5          2015  1.839999e+08  1.902723e+09  \n",
       "4           7.3          2015  1.747999e+08  1.385749e+09  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load your data and print out a few lines. Perform operations to inspect data\n",
    "#   types and look for instances of missing or possibly errant data.\n",
    "df.head(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10866, 21)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>popularity</th>\n",
       "      <th>budget</th>\n",
       "      <th>revenue</th>\n",
       "      <th>runtime</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>vote_average</th>\n",
       "      <th>release_year</th>\n",
       "      <th>budget_adj</th>\n",
       "      <th>revenue_adj</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>1.086600e+04</td>\n",
       "      <td>1.086600e+04</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>1.086600e+04</td>\n",
       "      <td>1.086600e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>66064.177434</td>\n",
       "      <td>0.646441</td>\n",
       "      <td>1.462570e+07</td>\n",
       "      <td>3.982332e+07</td>\n",
       "      <td>102.070863</td>\n",
       "      <td>217.389748</td>\n",
       "      <td>5.974922</td>\n",
       "      <td>2001.322658</td>\n",
       "      <td>1.755104e+07</td>\n",
       "      <td>5.136436e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>92130.136561</td>\n",
       "      <td>1.000185</td>\n",
       "      <td>3.091321e+07</td>\n",
       "      <td>1.170035e+08</td>\n",
       "      <td>31.381405</td>\n",
       "      <td>575.619058</td>\n",
       "      <td>0.935142</td>\n",
       "      <td>12.812941</td>\n",
       "      <td>3.430616e+07</td>\n",
       "      <td>1.446325e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000065</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>1960.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>10596.250000</td>\n",
       "      <td>0.207583</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>5.400000</td>\n",
       "      <td>1995.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>20669.000000</td>\n",
       "      <td>0.383856</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2006.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>75610.000000</td>\n",
       "      <td>0.713817</td>\n",
       "      <td>1.500000e+07</td>\n",
       "      <td>2.400000e+07</td>\n",
       "      <td>111.000000</td>\n",
       "      <td>145.750000</td>\n",
       "      <td>6.600000</td>\n",
       "      <td>2011.000000</td>\n",
       "      <td>2.085325e+07</td>\n",
       "      <td>3.369710e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>417859.000000</td>\n",
       "      <td>32.985763</td>\n",
       "      <td>4.250000e+08</td>\n",
       "      <td>2.781506e+09</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>9767.000000</td>\n",
       "      <td>9.200000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>4.250000e+08</td>\n",
       "      <td>2.827124e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  id    popularity        budget       revenue       runtime  \\\n",
       "count   10866.000000  10866.000000  1.086600e+04  1.086600e+04  10866.000000   \n",
       "mean    66064.177434      0.646441  1.462570e+07  3.982332e+07    102.070863   \n",
       "std     92130.136561      1.000185  3.091321e+07  1.170035e+08     31.381405   \n",
       "min         5.000000      0.000065  0.000000e+00  0.000000e+00      0.000000   \n",
       "25%     10596.250000      0.207583  0.000000e+00  0.000000e+00     90.000000   \n",
       "50%     20669.000000      0.383856  0.000000e+00  0.000000e+00     99.000000   \n",
       "75%     75610.000000      0.713817  1.500000e+07  2.400000e+07    111.000000   \n",
       "max    417859.000000     32.985763  4.250000e+08  2.781506e+09    900.000000   \n",
       "\n",
       "         vote_count  vote_average  release_year    budget_adj   revenue_adj  \n",
       "count  10866.000000  10866.000000  10866.000000  1.086600e+04  1.086600e+04  \n",
       "mean     217.389748      5.974922   2001.322658  1.755104e+07  5.136436e+07  \n",
       "std      575.619058      0.935142     12.812941  3.430616e+07  1.446325e+08  \n",
       "min       10.000000      1.500000   1960.000000  0.000000e+00  0.000000e+00  \n",
       "25%       17.000000      5.400000   1995.000000  0.000000e+00  0.000000e+00  \n",
       "50%       38.000000      6.000000   2006.000000  0.000000e+00  0.000000e+00  \n",
       "75%      145.750000      6.600000   2011.000000  2.085325e+07  3.369710e+07  \n",
       "max     9767.000000      9.200000   2015.000000  4.250000e+08  2.827124e+09  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                      10865\n",
       "imdb_id                 10855\n",
       "popularity              10814\n",
       "budget                    557\n",
       "revenue                  4702\n",
       "original_title          10571\n",
       "cast                    10719\n",
       "homepage                 2896\n",
       "director                 5067\n",
       "tagline                  7997\n",
       "keywords                 8804\n",
       "overview                10847\n",
       "runtime                   247\n",
       "genres                   2039\n",
       "production_companies     7445\n",
       "release_date             5909\n",
       "vote_count               1289\n",
       "vote_average               72\n",
       "release_year               56\n",
       "budget_adj               2614\n",
       "revenue_adj              4840\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2015, 2014, 1977, 2009, 2010, 1999, 2001, 2008, 2011, 2002, 1994,\n",
       "       2012, 2003, 1997, 2013, 1985, 2005, 2006, 2004, 1972, 1980, 2007,\n",
       "       1979, 1984, 1983, 1995, 1992, 1981, 1996, 2000, 1982, 1998, 1989,\n",
       "       1991, 1988, 1987, 1968, 1974, 1975, 1962, 1964, 1971, 1990, 1961,\n",
       "       1960, 1976, 1993, 1967, 1963, 1986, 1973, 1970, 1965, 1969, 1978,\n",
       "       1966], dtype=int64)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check if there are different release year to take into consideration the inflation rate\n",
    "df['release_year'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# My Analysis will be about relationship between popularity and budget_adj, production companies and vote_count. \n",
    "\n",
    "Note that budget_adj is used instead of budget, this is because of this data set is composed of entries from different years, therefore considering inflation will give us a more accurate results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'imdb_id', 'popularity', 'budget', 'revenue', 'original_title',\n",
       "       'cast', 'homepage', 'director', 'tagline', 'keywords', 'overview',\n",
       "       'runtime', 'genres', 'production_companies', 'release_date',\n",
       "       'vote_count', 'vote_average', 'release_year', 'budget_adj',\n",
       "       'revenue_adj'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>popularity</th>\n",
       "      <th>production_companies</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>budget_adj</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>32.985763</td>\n",
       "      <td>Universal Studios|Amblin Entertainment|Legenda...</td>\n",
       "      <td>5562</td>\n",
       "      <td>1.379999e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>28.419936</td>\n",
       "      <td>Village Roadshow Pictures|Kennedy Miller Produ...</td>\n",
       "      <td>6185</td>\n",
       "      <td>1.379999e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>13.112507</td>\n",
       "      <td>Summit Entertainment|Mandeville Films|Red Wago...</td>\n",
       "      <td>2480</td>\n",
       "      <td>1.012000e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>11.173104</td>\n",
       "      <td>Lucasfilm|Truenorth Productions|Bad Robot</td>\n",
       "      <td>5292</td>\n",
       "      <td>1.839999e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>9.335014</td>\n",
       "      <td>Universal Pictures|Original Film|Media Rights ...</td>\n",
       "      <td>2947</td>\n",
       "      <td>1.747999e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   popularity                               production_companies  vote_count  \\\n",
       "0   32.985763  Universal Studios|Amblin Entertainment|Legenda...        5562   \n",
       "1   28.419936  Village Roadshow Pictures|Kennedy Miller Produ...        6185   \n",
       "2   13.112507  Summit Entertainment|Mandeville Films|Red Wago...        2480   \n",
       "3   11.173104          Lucasfilm|Truenorth Productions|Bad Robot        5292   \n",
       "4    9.335014  Universal Pictures|Original Film|Media Rights ...        2947   \n",
       "\n",
       "     budget_adj  \n",
       "0  1.379999e+08  \n",
       "1  1.379999e+08  \n",
       "2  1.012000e+08  \n",
       "3  1.839999e+08  \n",
       "4  1.747999e+08  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lets drop the columns we wont be using for the analysis. (I still would like to keep the original_title to build to_be_watched list for myself =))\n",
    "df.drop(['id', 'imdb_id','budget', 'revenue', 'original_title',\n",
    "       'cast', 'homepage', 'director', 'tagline', 'keywords', 'overview',\n",
    "       'runtime', 'genres', 'release_date',\n",
    "        'vote_average', 'release_year','revenue_adj'],axis =1, inplace = True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10866, 4)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Data Cleaning \n",
    "<br>\n",
    "After cleaning, budget_adj value will be converted to millions and popularity data will be rounded to 1 digit for easier calculation\n",
    "<br> \n",
    " Dataframe \"pc_analysis\" will also be created for production companies analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of duplicated rows:2\n",
      " \n",
      "Duplicate row is dropped.\n"
     ]
    }
   ],
   "source": [
    "#Lets drop duplicates if any.\n",
    "print('number of duplicated rows:{}'.format(df.duplicated().sum()))\n",
    "print(' ')\n",
    "df.drop_duplicates(inplace=True)\n",
    "print('Duplicate row is dropped.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 10864 entries, 0 to 10865\n",
      "Data columns (total 4 columns):\n",
      "popularity              10864 non-null float64\n",
      "production_companies    9835 non-null object\n",
      "vote_count              10864 non-null int64\n",
      "budget_adj              10864 non-null float64\n",
      "dtypes: float64(2), int64(1), object(1)\n",
      "memory usage: 424.4+ KB\n"
     ]
    }
   ],
   "source": [
    "#Let's check if there is any missing data\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop rows with missing data i.e production_companies\n",
    "df.dropna(inplace = True )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "popularity              0.0\n",
      "production_companies    0.0\n",
      "vote_count              0.0\n",
      "budget_adj              0.0\n",
      "dtype: float64\n",
      " -----\n",
      "popularity              0.0\n",
      "production_companies    0.0\n",
      "vote_count              0.0\n",
      "budget_adj              0.0\n",
      "dtype: float64\n",
      " -----\n",
      "popularity                                                        1704.85\n",
      "production_companies    BBC Films|See-Saw Films|FilmNation Entertainme...\n",
      "vote_count                                                         231424\n",
      "budget_adj                                                              0\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "#Lets check if there is any numerical data filled with ie. missing:\n",
    "print(df[df[\"popularity\"]==0].sum())\n",
    "print(' -----')\n",
    "print(df[df[\"vote_count\"]==0].sum())\n",
    "print(' -----')\n",
    "print(df[df[\"budget_adj\"]==0].sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>popularity</th>\n",
       "      <th>production_companies</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>budget_adj</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>32.985763</td>\n",
       "      <td>Universal Studios|Amblin Entertainment|Legenda...</td>\n",
       "      <td>5562</td>\n",
       "      <td>1.379999e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>28.419936</td>\n",
       "      <td>Village Roadshow Pictures|Kennedy Miller Produ...</td>\n",
       "      <td>6185</td>\n",
       "      <td>1.379999e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>13.112507</td>\n",
       "      <td>Summit Entertainment|Mandeville Films|Red Wago...</td>\n",
       "      <td>2480</td>\n",
       "      <td>1.012000e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>11.173104</td>\n",
       "      <td>Lucasfilm|Truenorth Productions|Bad Robot</td>\n",
       "      <td>5292</td>\n",
       "      <td>1.839999e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>9.335014</td>\n",
       "      <td>Universal Pictures|Original Film|Media Rights ...</td>\n",
       "      <td>2947</td>\n",
       "      <td>1.747999e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   popularity                               production_companies  vote_count  \\\n",
       "0   32.985763  Universal Studios|Amblin Entertainment|Legenda...        5562   \n",
       "1   28.419936  Village Roadshow Pictures|Kennedy Miller Produ...        6185   \n",
       "2   13.112507  Summit Entertainment|Mandeville Films|Red Wago...        2480   \n",
       "3   11.173104          Lucasfilm|Truenorth Productions|Bad Robot        5292   \n",
       "4    9.335014  Universal Pictures|Original Film|Media Rights ...        2947   \n",
       "\n",
       "     budget_adj  \n",
       "0  1.379999e+08  \n",
       "1  1.379999e+08  \n",
       "2  1.012000e+08  \n",
       "3  1.839999e+08  \n",
       "4  1.747999e+08  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# There are missing budget_adj values, drop them\n",
    "df=df[df['budget_adj'] !=0]\n",
    "df.shape\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>popularity</th>\n",
       "      <th>production_companies</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>budget_adj</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>32.985763</td>\n",
       "      <td>Universal Studios|Amblin Entertainment|Legenda...</td>\n",
       "      <td>5562</td>\n",
       "      <td>138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>28.419936</td>\n",
       "      <td>Village Roadshow Pictures|Kennedy Miller Produ...</td>\n",
       "      <td>6185</td>\n",
       "      <td>138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>13.112507</td>\n",
       "      <td>Summit Entertainment|Mandeville Films|Red Wago...</td>\n",
       "      <td>2480</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>11.173104</td>\n",
       "      <td>Lucasfilm|Truenorth Productions|Bad Robot</td>\n",
       "      <td>5292</td>\n",
       "      <td>184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>9.335014</td>\n",
       "      <td>Universal Pictures|Original Film|Media Rights ...</td>\n",
       "      <td>2947</td>\n",
       "      <td>175</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   popularity                               production_companies  vote_count  \\\n",
       "0   32.985763  Universal Studios|Amblin Entertainment|Legenda...        5562   \n",
       "1   28.419936  Village Roadshow Pictures|Kennedy Miller Produ...        6185   \n",
       "2   13.112507  Summit Entertainment|Mandeville Films|Red Wago...        2480   \n",
       "3   11.173104          Lucasfilm|Truenorth Productions|Bad Robot        5292   \n",
       "4    9.335014  Universal Pictures|Original Film|Media Rights ...        2947   \n",
       "\n",
       "   budget_adj  \n",
       "0         138  \n",
       "1         138  \n",
       "2         101  \n",
       "3         184  \n",
       "4         175  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's convert budget_adj to millions and round to make it readable\n",
    "\n",
    "df['budget_adj']=df['budget_adj'].apply(lambda x: x/1000000)\n",
    "\n",
    "df['budget_adj']=df['budget_adj'].apply(lambda x: round(x))\n",
    "\n",
    "df['budget_adj']\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>popularity</th>\n",
       "      <th>production_companies</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>budget_adj</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>Universal Studios|Amblin Entertainment|Legenda...</td>\n",
       "      <td>5562</td>\n",
       "      <td>138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>28.4</td>\n",
       "      <td>Village Roadshow Pictures|Kennedy Miller Produ...</td>\n",
       "      <td>6185</td>\n",
       "      <td>138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>13.1</td>\n",
       "      <td>Summit Entertainment|Mandeville Films|Red Wago...</td>\n",
       "      <td>2480</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>11.2</td>\n",
       "      <td>Lucasfilm|Truenorth Productions|Bad Robot</td>\n",
       "      <td>5292</td>\n",
       "      <td>184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>9.3</td>\n",
       "      <td>Universal Pictures|Original Film|Media Rights ...</td>\n",
       "      <td>2947</td>\n",
       "      <td>175</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   popularity                               production_companies  vote_count  \\\n",
       "0        33.0  Universal Studios|Amblin Entertainment|Legenda...        5562   \n",
       "1        28.4  Village Roadshow Pictures|Kennedy Miller Produ...        6185   \n",
       "2        13.1  Summit Entertainment|Mandeville Films|Red Wago...        2480   \n",
       "3        11.2          Lucasfilm|Truenorth Productions|Bad Robot        5292   \n",
       "4         9.3  Universal Pictures|Original Film|Media Rights ...        2947   \n",
       "\n",
       "   budget_adj  \n",
       "0         138  \n",
       "1         138  \n",
       "2         101  \n",
       "3         184  \n",
       "4         175  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['popularity']=df['popularity'].apply(lambda x: round(x,1))\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "popularity              float64\n",
       "production_companies     object\n",
       "vote_count                int64\n",
       "budget_adj                int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### New Dataframe for analyzing production companies ( will be used in second question)\n",
    "\n",
    "__Note that production_companies column is not suitable for analysis, due to seperator between columns and multiple entries in columns\n",
    "...Lets create a df that will enable us to analyze production_companies data---\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Create 5 df copies to divide distinct entries in each column\n",
    "dfc=df.copy()\n",
    "\n",
    "dfc['p1'], dfc['p2'] = dfc['production_companies'].str.split('|', 1).str\n",
    "\n",
    "arr =['p1','p2','p3','p4','p5']\n",
    "for i in range(3):\n",
    "     dfc[arr[i+1]], dfc[arr[i+2]] = dfc[arr[i+1]].str.split('|', 1).str\n",
    " \n",
    "del dfc['production_companies']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Now that we have splitted each name of production company to distinct columns, we can create dataframe for each column of production companies\n",
    "# create sub-dataframes according to # of production companies\n",
    "\n",
    "pc_analysis = pd.DataFrame(columns = ['popularity',  'vote_count','budget_adj', 'prod_company'])\n",
    "i=0\n",
    "for i in [0,1,2,3,4]:\n",
    "    pd1=pd.DataFrame(dfc.iloc[:,[0,1,2,i+3]])\n",
    "    pd1.rename(columns={pd1.columns[3]:\"prod_company\"}, inplace = True)\n",
    "    pc_analysis=pc_analysis.append(pd1,sort =False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#Now drop entries with NaN values\n",
    "# Drop rows with missing data i.e production_companies\n",
    "pc_analysis.dropna(inplace = True )\n",
    "pc_analysis.dtypes\n",
    "pc_analysis['vote_count'] =pc_analysis['vote_count'].astype(int)\n",
    "pc_analysis['budget_adj'] =pc_analysis['budget_adj'].astype(int)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "Now that we have pc_analysis dataframe for production company analysis, there are only one entry in each row of prod_company\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# Exploratory Data Analysis\n",
    "\n",
    "# QUESTION 1:Is there any relationship between popularity and budget adj if so how?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1- a Lets explore popularity versus budget and how their histograms distributed\n",
    "###### We wont answer the question 1 here, this part is drawn to understand main chracteristics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.axes ([0.05,1,2,0.5])\n",
    "plt.scatter(df['popularity'],df['budget_adj'],s=1)\n",
    "plt.title(\"Popularity vs Budget(In 2010's buying Power)\")\n",
    "plt.xlabel('Popularity')\n",
    "plt.ylabel(\"Budget (in M$)\")\n",
    "\n",
    "\n",
    "plt.axes ([0.05,0.3,0.8,0.5])\n",
    "plt.hist (df['budget_adj'], bins=30);\n",
    "plt.title(\"Budget Histogram\")\n",
    "plt.xlabel('Budget in M$ (In 2010 value)')\n",
    "plt.ylabel(\"Number of movies\")\n",
    "\n",
    "plt.axes ([1.15,0.3,1,0.5])\n",
    "plt.hist(df['popularity'],bins = 100);\n",
    "plt.title(\"Popularity Histogram\")\n",
    "plt.xlabel('Popularity')\n",
    "plt.ylabel(\"Number of movies\");\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "___Note 1-a\n",
    "We saw that budget and popularity instagram is skewed to the right.\n",
    "Also our scatterplot is impossible to read, therefore data will be grouped in part b to understand the relationship"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1 b we will group films according to their popularity to find the relationship"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 33.0)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min(df['popularity']),max(df['popularity'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "my_arr=[]\n",
    "for x in np.arange(0.0,33.1,0.1):\n",
    "    a=(x,df.query('popularity == @x').budget_adj.mean())\n",
    "    my_arr.append(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABUkAAADNCAYAAACFBfFQAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nO3dd7hlZXn38e+PImVAiiChDaM4aoAo6EgQjMEWFVTUCAHFgKJoAi9YYpz4GkUjybxe9hjRUZEiiiggRFBBIioWcEA6qJRBxplQxEJR6v3+sdfRzeGUdQ5n733K93Nd+9prPas899rzsAZunpKqQpIkSZIkSZLmqtUGHYAkSZIkSZIkDZJJUkmSJEmSJElzmklSSZIkSZIkSXOaSVJJkiRJkiRJc5pJUkmSJEmSJElzmklSSZIkSZIkSXOaSVJJkiRNqSQLklSSNQYdy0QlOTfJ6wYdx1iSHJHk8w/j+k8m+depjEmSJGmmM0kqSZLUZ0mWJ7knySbDyi9ukosL+hzP7kkeSHJH8/llkvf0M4bRzISk5UxTVW+sqn+DP/7Zrxh0TJIkSYNmklSSJGkwrgf2G9pJ8hfAOoMLh5VVtV5VrQc8AzgoyUsHGI96IMnqg45BkiRpOjJJKkmSNBjHA3/ftX8AcFz3CUnWSvKBJL9IclMzTHqd5thGSb6W5JYkv262t+q69twk/5bk+0luT3LW8J6ro6mq64EfANs193rI8PnuHp5JVm/ivDXJdcCew57jMUm+28TxrST/1T1cPMkuSX6Q5DdJLkmye1N+JPBXwMebHq4fHyneJF9O8r9JftvUs33XsWOa+s5o6j8/ybZdx5+X5Orm2o8DafMbdd37k0nObu79nSTbdB3fNcmPm3v/OMmuw36//0hyQXP8tCQbN8ce0ruz6X383Ek+/1FJzkxyJ/Cspux9SeYBXwe26OpFvEWSu5I8quseT23a2ZptfxtJkqSZxiSpJEnSYPwIeGSSP2969/0dMHyeyf8HPB7YEXgcsCXwrubYasDngG2A+cDvgeFJxFcCrwEeDTwC+Kc2gSVZCOzWxNjG64EXATsBi4BXDDv+BeAC4FHAEcCru+raEjgDeB+wcRPjyUk2rar/C3wPOLTp5XroKPV/HVhI5zkvAk4Ydnw/4D3ARsA1wJFN3ZsAJwPvBDYBrm2eeyJeBfxbc/3FQ3U3Cc8zgI81z/0h4Izu5COdJPlrgS2A+5pzJ2O8538lnWdeHzhvqLCq7gReSFcv4qpaCZwL7NN1/f7AiVV17yTjkyRJmvZMkkqSJA3OUG/S5wFXA78cOpAkdJKPb66q26rqduDfgX0BqupXVXVyVd3VHDsS+Oth9/9cVf2sqn4PnEQn2TqaLZqenL8DfgacT1dCbRz7AB+pqhur6jbgP7qeYz7wNOBdVXVPVZ0HnN517f7AmVV1ZlU9UFVnA8uAPVrWTVUdXVW3V9XddJKwT06yQdcpp1TVBVV1H50E4tDvsAdwZVV9pUkAfgT437b1Ns6oqu82df9f4OlJtqbTm/bnVXV8Vd1XVV+k82f84q5rj6+qy5tk5b8C+0xmOHyL5z+tqr7f/L5/aHHLY+n8uQwNz9+PTluVJEmatUySSpIkDc7xdHr5HciwofbApsC6wIVN8vI3wDeacpKsm+RTSW5oEpvfBTYclmTrTvjdBaw3Riwrq2rDqnoksCGdnqnHtnyOLYAbu/ZvGHbstqq6q6us+9xtgL2HnrF5zmcAm7epuBnqvyTJtc3vsLw51D21wGi/w4PirqoaFlsb3dffAdzW3HcLHvw70OxvOdK1zbE1h8U9rpbPP9FnOg3YLslj6STwf1tVF0zwHpIkSTOKSVJJkqQBqaob6CzgtAdwyrDDt9JJVG7fJC83rKoNmoWVAN4KPAH4yyax+cymvPWcmmPE9Vs6Q+SHej3e2Xyv23Xan3VtrwK27tqfP+zYxkm6r+0+90Y6PSo37PrMq6olQ+GME+4rgb2A5wIbAAua8ja/w4Pibnrvbj366SPqvn49OlMGrGw+2ww7dz5dvYV56G92L50/9zvp+q2bxPemo9Tf5vnH+g0fcqzpbXoSnakEXo29SCVJ0hxgklSSJGmwDgKe3Qy5/qOqegD4NPDhJI+GzvydSZ7fnLI+nSTqb5r5L989VQE1yb59gSuaWG6hk9zbv+m5+Fpg265LTgIOS7JVko2AxV3PcQOd4fNHJHlEkqfz4CHnnwdenOT5zb3XbhYuGlqE6ibgsWOEuz5wN/ArOonFf5/Ao54BbJ/k5eksSnUYD07+trFHkmckeQSduUnPr6obgTOBxyd5ZZI1kvwdnYWwvtZ17f5JtmsSyO8FvlJV99OZ7mDtJHs2iyW9E1hrlPofzvND5/d91LDh+dDp2Xwg8BIeOleuJEnSrGOSVJIkaYCq6tqqWjbK4bfTWWjoR81Q6m/R6T0Knfkz16HT8/BHdIbiPxx/XOGcztDvjen0JBzyeuBtdJJx2wM/6Dr2aeCbwCV0Fg4a3iv2VcDTm2vfB3yJTmKPJqG4F/AO4BY6PUvfxp/+PfWjwCuS/DrJSAsbHdfE+0vgStovNkVV3QrsDSxpYlsIfL/t9Y0v0ElQ3wY8leY3q6pf0VnM6q3Nvf8ZeFFT55DjgWPoTAewNp0k7VBP3n8EPtM8153Ag1a77zLp52/quhr4InBdM93BFk3594EHgIuqavlE7ilJkjQTpTP1kiRJktQfSb4EXF1VU9b7dRCSHAOsqKp3TuLac4HPV9VnpjquqZLkf4AvTOcYJUmSpoo9SSVJktRTSZ6WZNskqyV5AZ2eo18ddFwaXZKnAU+h0+tXkiRp1ltj0AFIkiRp1vszOkPwH0Vn2Pg/VNVPBhuSRpPkWOClwOFVdfug45EkSeoHh9tLkiRJkiRJmtMcbi9JkiRJkiRpTjNJKkmSJEmSJGlOm9Fzkm6yySa1YMGCQYchSZIkSZIkaRq68MILb62qTcc7b0YnSRcsWMCyZcsGHYYkSZIkSZKkaSjJDW3Oc7i9JEmSJEmSpDnNJKkkSZIkSZKkOc0kqSRJkiRJkqQ5zSSpJEmSJEmSpDmtZ0nSJFsn+XaSq5JckeTwpvyIJL9McnHz2aPrmn9Jck2SnyZ5fq9ikyRJkiRJkqQhE1rdPslGwNZVdWmL0+8D3lpVFyVZH7gwydnNsQ9X1QeG3Xs7YF9ge2AL4FtJHl9V908kRknTx4LFZ/S1vuVL9uxrfZIkSZIkaXYYtydpknOTPDLJxsAlwOeSfGi866pqVVVd1GzfDlwFbDnGJXsBJ1bV3VV1PXANsHObh5AkSZIkSZKkyWoz3H6Dqvod8HLgc1X1VOC5E6kkyQJgJ+D8pujQJJcmObrpnQqdBOqNXZetYISkapKDkyxLsuyWW26ZSBiSJEmSJEmS9BBtkqRrJNkc2Af42kQrSLIecDLwpibZehSwLbAjsAr44NCpI1xeDymoWlpVi6pq0aabbjrRcCRJkiRJkiTpQdokSd8LfBO4tqp+nOSxwM/b3DzJmnQSpCdU1SkAVXVTVd1fVQ8An+ZPQ+pXAFt3Xb4VsLLdY0iSJEmSJEnS5IybJK2qL1fVk6rqH5r966rqb8e7LkmAzwJXVdWHuso37zrtZcDlzfbpwL5J1kryGGAhcEH7R5EkSZIkSZKkiRt3dfskj6czRH6zqtohyZOAl1TV+8a5dDfg1cBlSS5uyt4B7JdkRzpD6ZcDbwCoqiuSnARcCdwHHOLK9pIkSZIkSZJ6bdwkKZ0h8W8DPgVQVZcm+QIwZpK0qs5j5HlGzxzjmiOBI1vEJEmSJEmSJElTos2cpOtW1fBh7/f1IhhJkiRJkiRJ6rc2SdJbk2xLs9J8klfQWZVekiRJkiRJkma8NsPtDwGWAk9M8kvgemD/nkYlSZIkSZIkSX0ybpK0qq4DnptkHrBaVd3e+7AkSZIkSZIkqT9GTZIm2b+qPp/kLcPKAaiqD/U4NkmSJEmSJEnqubF6ks5rvtfvRyCSJEmSJEmSNAijJkmr6lPN5ieq6pY+xSNJkiRJkiRJfdVmdfsfJDkryUFJNup5RJIkSZIkSZLUR+MmSatqIfBOYHvgwiRfS+Lq9pIkSZIkSZJmhTY9SamqC6rqLcDOwG3AsT2NSpIkSZIkSZL6ZNwkaZJHJjkgydeBHwCr6CRLJUmSJEmSJGnGG2t1+yGXAF8F3ltVP+xxPJIkSZIkSZLUV22SpI+tqkqyfpL1quqOnkclSZIkSZIkSX3SZk7S7ZP8BLgcuDLJhUl26HFckiRJkiRJktQXbZKkS4G3VNU2VTUfeGtTJkmSJEmSJEkzXpsk6byq+vbQTlWdC8zrWUSSJEmSJEmS1Edt5iS9Lsm/Asc3+/sD1/cuJEmSJEmSJEnqnzY9SV8LbAqcApzabL+ml0FJkiRJkiRJUr+M25O0qn4NHDbRGyfZGjgO+DPgAWBpVX00ycbAl4AFwHJgn6r6dZIAHwX2AO4CDqyqiyZaryRJkiRJkiRNxLg9SZMsSnJKkouSXDr0aXHv+4C3VtWfA7sAhyTZDlgMnFNVC4Fzmn2AFwILm8/BwFGTeB5JkiRJkiRJmpA2c5KeALwNuIxOj9BWqmoVsKrZvj3JVcCWwF7A7s1pxwLnAm9vyo+rqgJ+lGTDJJs395EkSZIkSZKknmiTJL2lqk5/OJUkWQDsBJwPbDaU+KyqVUke3Zy2JXBj12UrmrIHJUmTHEynpynz589/OGFJkmaBBYvP6Gt9y5fs2df6JEmSJEm91yZJ+u4kn6EzNP7uocKqOqVNBUnWA04G3lRVv+tMPTryqSOU1UMKqpYCSwEWLVr0kOOSJEmSJEmSNBFtkqSvAZ4IrMmfhtsXndXux5RkTToJ0hO6kqo3DQ2jT7I5cHNTvgLYuuvyrYCVLeKTJEmSJEmSpElrkyR9clX9xURv3KxW/1ngqqr6UNeh04EDgCXN92ld5YcmORH4S+C3zkcqSZIkSZIkqdfaJEl/lGS7qrpygvfeDXg1cFmSi5uyd9BJjp6U5CDgF8DezbEzgT2Aa4C76PRglSRJkiRJkqSeapMkfQZwQJLr6cxJGqCq6kljXVRV5zHyPKMAzxnh/AIOaRGPJEmSJEmSJE2ZNknSF/Q8CkmSJEmSJEkakHGTpFV1Qz8CkSTNTAsWn9HX+pYv2bOv9UmSJEmSZr/VBh2AJEmSJEmSJA3SqEnSJGv1MxBJkiRJkiRJGoSxepL+ECDJ8X2KRZIkSZIkSZL6bqw5SR+R5ABg1yQvH36wqk7pXViSJEmSJEmS1B9jJUnfCLwK2BB48bBjBZgklSRJkiRJkjTjjZokrarzgPOSLKuqz/YxJkmSJEmSJEnqm7F6kg45PslhwDOb/e8An6yqe3sXliRJI1uw+IxBhyBJkiRJmmXaJEk/AazZfAO8GjgKeF2vgpIkSZIkSZKkfmmTJH1aVT25a/9/klzSq4AkSZIkSZIkqZ9Wa3HO/Um2HdpJ8ljg/t6FJEmSJEmSJEn906Yn6duAbye5DgiwDfCankYlSZMw2bkqly/Zc4ojkSRJkiRJM8m4SdKqOifJQuAJdJKkV1fV3T2PTJIkSZIkSZL6oE1PUpqk6KU9jkWSJEmSJEmS+q7NnKSSJEmSJEmSNGuZJJUkSZIkSZI0p4073D7JOVX1nPHKRrjuaOBFwM1VtUNTdgTweuCW5rR3VNWZzbF/AQ4C7gcOq6pvTvBZJEnSHDDZRdoma6oWd+tn3C5IJ0mSJE3MqEnSJGsD6wKbJNmIzqJNAI8Etmhx72OAjwPHDSv/cFV9YFhd2wH7Ats39/5WksdX1f1tHkJSe/1OLkiSJEmSJE13Y/UkfQPwJjpJy4u6yn8H/Nd4N66q7yZZ0DKOvYATmwWirk9yDbAz8MOW10uSJEmSJEnSpIw6J2lVfbSqHgP8U1U9puvz5Kr6+MOo89AklyY5uumhCrAlcGPXOSuaMkmSJEmSJEnqqTYLNx2d5J1JlgIkWZjkRZOs7yhgW2BHYBXwwaY8I5xbI90gycFJliVZdsstt4x0iiRJkiRJkiS11ipJCtwD7NrsrwDeN5nKquqmqrq/qh4APk1nSP3QPbfuOnUrYOUo91haVYuqatGmm246mTAkSZIkSZIk6Y/aJEm3rar3A/cCVNXvGbnn57iSbN61+zLg8mb7dGDfJGsleQywELhgMnVIkiRJkiRJ0kSMtXDTkHuSrEMz/D3JtsDd412U5IvA7sAmSVYA7wZ2T7Jjc6/ldBaHoqquSHIScCVwH3CIK9tLUu8tWHzGoEOQJEmSJGng2iRJ3w18A9g6yQnAbsCB411UVfuNUPzZMc4/EjiyRTySJEmSJEmSNGXGTZJW1dlJLgJ2oTPM/vCqurXnkUlSn/S7N+XyJXv2tT5JkiRJkjS2cZOkSZ7SbK5qvucn2QC4oaru61lkkiRJkiRJktQHbYbbfwJ4CnApnZ6kOzTbj0ryxqo6q4fxSZIkSZIkSbOaIxwHr83q9suBnapqUVU9FdiJzqr0zwXe38PYJEmSJEmSJKnn2iRJn1hVVwztVNWVdJKm1/UuLEmSJEmSJEnqjzbD7X+a5CjgxGb/74CfJVkLuLdnkUmSJEmSJElSH7TpSXogcA3wJuDNwHVN2b3As3oVmCRJkiRJkiT1w7g9Savq98AHm89wd0x5RJIkSZIkSZLUR6MmSZNcBtRox6vqST2JSJIkSZIkSZL6aKyepC9qvg9pvo9vvl8F3NWziCRJkiRJkiSpj0ZNklbVDQBJdquq3boOLU7yfeC9vQ5OkiRJkiRJknqtzcJN85I8Y2gnya7AvN6FJEmSJEmSJEn9M+7CTcBBwNFJNmj2fwO8tnchSRrJgsVnDDoESZIkSZKkWanN6vYXAk9O8kggVfXb3oclSZIkSZIkSf0xbpI0ybuG7QNQVc5JKkmSJEmSJGnGazPc/s6u7bXprHp/VW/CkSRJkiRJkqT+ajPc/oPd+0k+AJzes4gkSZIkSZIkqY/arG4/3LrAY6c6EEmSJEmSJEkahHGTpEkuS3Jp87kC+Cnw0RbXHZ3k5iSXd5VtnOTsJD9vvjdqypPkY0muaep5ysN5KEmSJEmSJElqq01P0hcBL24+fwNsUVUfb3HdMcALhpUtBs6pqoXAOc0+wAuBhc3nYOCoFveXJEmSJEmSpIdt3CRpVd0APArYC3g58BdtblxV3wVuG1a8F3Bss30s8NKu8uOq40fAhkk2b1OPJEmSJEmSJD0cbYbbv4tOQvNRwCbAMUneOcn6NquqVQDN96Ob8i2BG7vOW9GUSZIkSZIkSVJPjbu6PbAfsFNV/QEgyRLgIuB9UxhHRiirEU9MDqYzJJ/58+dPYQiSJEmSJEmS5qI2SdLlwNrAH5r9tYBrJ1nfTUk2r6pVzXD6m5vyFcDWXedtBawc6QZVtRRYCrBo0aIRE6mSNNctWHzGoEOQJEmSJGnGGHW4fZL/TPIx4G7giiTHJPkccDlwxyTrOx04oNk+ADitq/zvm1XudwF+OzQsX5IkSZIkSZJ6aayepMua7wuBU7vKz21z4yRfBHYHNkmyAng3sAQ4KclBwC+AvZvTzwT2AK4B7gJe0y58afqw554kSZIkSdLMNGqStKqOHe1YG1W13yiHnjPCuQUc8nDqkyRJkiRJkqTJGHd1e0mSJEmSJEmazdos3CTNag6TlyRJkiRJmtta9yRNMq+XgUiSJEmSJEnSIIybJE2ya5Irgaua/Scn+UTPI5MkSZIkSZKkPmjTk/TDwPOBXwFU1SXAM3sZlCRJkiRJkiT1S6s5SavqxiTdRff3JhxJmv2mah7c5Uv2nJL7SJIkSZI017VJkt6YZFegkjwCOIxm6L0kSZIkSZIkzXRthtu/ETgE2BJYAezY7EuSJEmSJEnSjDduT9KquhV4VR9ikSRJkiRJkqS+GzdJmuRjIxT/FlhWVadNfUjS1JiqeR8lSZIkSZI0u7UZbr82nSH2P28+TwI2Bg5K8pEexiZJkiRJkiRJPddm4abHAc+uqvsAkhwFnAU8D7ish7FpDrHXpzRx/nMjSZIkSdLUaNOTdEtgXtf+PGCLqrofuLsnUUmSJEmSJElSn7TpSfp+4OIk5wIBngn8e5J5wLd6GJskSZIkSZIk9Vyb1e0/m+RMYGc6SdJ3VNXK5vDbehmcJEmSJEmSJPVam+H2AH8AVgG3AY9L8szehSRJkiRJkiRJ/TNuT9IkrwMOB7YCLgZ2AX4IPLu3oUmSJEmSJElS77XpSXo48DTghqp6FrATcEtPo5IkSZIkSZKkPmmzcNMfquoPSUiyVlVdneQJD6fSJMuB24H7gfuqalGSjYEvAQuA5cA+VfXrh1OPJEmSJEmSJI2nTU/SFUk2BL4KnJ3kNGDlONe08ayq2rGqFjX7i4FzqmohcE6zL0mSJEmSJEk91WZ1+5c1m0ck+TawAfCNHsSyF7B7s30scC7w9h7UI0mSJEmSJEl/NGaSNMlqwKVVtQNAVX1niuot4KwkBXyqqpYCm1XVqqaeVUkePUV1aRpasPiMQYcgSZIkSZIkAeMkSavqgSSXJJlfVb+Ywnp3q6qVTSL07CRXt70wycHAwQDz58+fwpA01UyESpIkSZIkaSZos3DT5sAVSS4A7hwqrKqXTLbSqlrZfN+c5FRgZ+CmJJs3vUg3B24e5dqlwFKARYsW1WRjkCRJkiRJkiRolyR9z1RWmGQesFpV3d5s/w3wXuB04ABgSfN92lTWK0mSJEmSJEkjabNw03eSbAMsrKpvJVkXWP1h1LkZcGqSofq/UFXfSPJj4KQkBwG/APZ+GHWohxxGL0mSJEmSpNlk3CRpktfTmQN0Y2BbYEvgk8BzJlNhVV0HPHmE8l9N9p6SJEmSJEmSNFlthtsfQmfO0PMBqurnrjwvSdLc0u9RBMuX7NnX+iRJkiTNbW2SpHdX1T3N8HiSrAG4YNIc4vB6SZIkSZIkzWartTjnO0neAayT5HnAl4H/7m1YkiRJkiRJktQfbXqSLgYOAi4D3gCcCXyml0Fp8Ow9KkmSJEmSpLmiTZJ0L+C4qvp0r4ORJEmSJEmSpH5rM9z+JcDPkhyfZM9mTlJJkiRJkiRJmhXGTZJW1WuAx9GZi/SVwLVJHG4vSZIkSZIkaVZo1Su0qu5N8nU6q9qvQ2cI/ut6GZgkSZIkSZIk9cO4SdIkLwD2BZ4FnEtn0aZ9ehuWesUFmSRJkiRJkqQHa9OT9EDgROANVXV3b8ORJEmSJEmSpP4aN0laVft27yfZDXhlVR3Ss6g0Zew5KkmSJEmSJI2t1ZykSXaks2jTPsD1wCm9DEqSJEmSJEmS+mXUJGmSx9OZi3Q/4FfAl4BU1bP6FJtasreoJKmbfy9IkiRJ0sSM1ZP0auB7wIur6hqAJG/uS1SSJEmSJEmS1CerjXHsb4H/Bb6d5NNJngOkP2FJkiRJkiRJUn+M2pO0qk4FTk0yD3gp8GZgsyRHAadW1Vl9ilEjcCilJEmSJEmSNDXarG5/J3ACcEKSjYG9gcWASdI+MikqSZIkSZIk9cZYw+0foqpuq6pPVdWzexWQJEmSJEmSJPXThJKk/ZDkBUl+muSaJIsHHY8kSZIkSZKk2W1aJUmTrA78F/BCYDtgvyTbDTYqSZIkSZIkSbPZtEqSAjsD11TVdVV1D3AisNeAY5IkSZIkSZI0i023JOmWwI1d+yuaMkmSJEmSJEnqiVTVoGP4oyR7A8+vqtc1+68Gdq6q/9N1zsHAwc3uE4Cf9j3QmWUT4NZBByFNkO1WM5VtVzOR7VYzke1WM5HtVjOVbVczUXe73aaqNh3vgjV6G8+ErQC27trfCljZfUJVLQWW9jOomSzJsqpaNOg4pImw3Wqmsu1qJrLdaiay3Womst1qprLtaiaaTLudbsPtfwwsTPKYJI8A9gVOH3BMkiRJkiRJkmaxadWTtKruS3Io8E1gdeDoqrpiwGFJkiRJkiRJmsWmVZIUoKrOBM4cdByziFMTaCay3Wqmsu1qJrLdaiay3Womst1qprLtaiaacLudVgs3SZIkSZIkSVK/Tbc5SSVJkiRJkiSpr0ySzmJJXpDkp0muSbJ40PFIbSRZnuSyJBcnWTboeKSRJDk6yc1JLu8q2zjJ2Ul+3nxvNMgYpZGM0naPSPLL5r17cZI9BhmjNFySrZN8O8lVSa5IcnhT7ntX09YY7dZ3rqatJGsnuSDJJU27fU9T/pgk5zfv2y81C21L08IY7faYJNd3vW93HPdeDrefnZKsDvwMeB6wAvgxsF9VXTnQwKRxJFkOLKqqWwcdizSaJM8E7gCOq6odmrL3A7dV1ZLmf0xtVFVvH2Sc0nCjtN0jgDuq6gODjE0aTZLNgc2r6qIk6wMXAi8FDsT3rqapMdrtPvjO1TSVJMC8qrojyZrAecDhwFuAU6rqxCSfBC6pqqMGGas0ZIx2+0bga1X1lbb3sifp7LUzcE1VXVdV9wAnAnsNOCZJmhWq6rvAbcOK9wKObbaPpfMfQtK0Mkrblaa1qlpVVRc127cDVwFb4ntX09gY7VaatqrjjmZ3zeZTwLOBoUST71tNK2O02wkzSTp7bQnc2LW/Av9S1sxQwFlJLkxy8KCDkSZgs6paBZ3/MAIePeB4pIk4NMmlzXB8hyxr2kqyANgJOB/fu5ohhrVb8J2raSzJ6kkuBm4GzgauBX5TVfc1p5hb0LQzvN1W1dD79sjmffvhJGuNdx+TpLNXRihzbgXNBLtV1VOAFwKHNENDJUm9cxSwLbAjsAr44GDDkUaWZD3gZOBNVfW7QccjtTFCu/Wdq2mtqu6vqh2BreiMUP3zkU7rb1TS2Ia32yQ7AP8CPBF4GrAxMO6UPCZJZ68VwNZd+1sBKwcUi9RaVa1svm8GTqXzF7M0E9zUzD82NA/ZzQOOR2qlqm5q/sXyAeDT+N7VNNTMMXYycEJVndIU+97VtDZSu/Wdq5miqn4DnAvsAmyYZI3mkLkFTVtd7fYFzbQnVVV3A5+jxfvWJOns9WNgYbMK3SOAfYHTBxyTNKYk85qJ7UkyD/gb4PKxr5KmjdOBA5rtA4DTBhiL1NpQkqnxMnzvapppFmT4LHBVVX2o65DvXU1bo7Vb37mazs17MKQAAAPISURBVJJsmmTDZnsd4Ll05tP9NvCK5jTft5pWRmm3V3f9j9TQmUd33Petq9vPYkn2AD4CrA4cXVVHDjgkaUxJHkun9yjAGsAXbLeajpJ8Edgd2AS4CXg38FXgJGA+8Atg76pygRxNK6O03d3pDPssYDnwhqF5HqXpIMkzgO8BlwEPNMXvoDO/o+9dTUtjtNv98J2raSrJk+gszLQ6nU51J1XVe5v/TjuRzpDlnwD7N73zpIEbo93+D7ApnekoLwbe2LXA08j3MkkqSZIkSZIkaS5zuL0kSZIkSZKkOc0kqSRJkiRJkqQ5zSSpJEmSJEmSpDnNJKkkSZIkSZKkOc0kqSRJkiRJkqQ5zSSpJEmS+ibJ/UkuTnJ5ki8nWXeK739gko9P8JpFST7WbO+eZNepjEmSJEnTn0lSSZIk9dPvq2rHqtoBuAd44yCDSbJGVS2rqsOaot0Bk6SSJElzjElSSZIkDcr3gMcBJHlL07v08iRvasoWJLk6ybFJLk3ylaGep0mWJ9mk2V6U5NzhN0/y4iTnJ/lJkm8l2awpPyLJ0iRnAcc1vUe/lmQBnaTtm5vern+V5PokazbXPbKpd82e/zKSJEnqK5OkkiRJ6rskawAvBC5L8lTgNcBfArsAr0+yU3PqE4ClVfUk4HfAP06gmvOAXapqJ+BE4J+7jj0V2KuqXjlUUFXLgU8CH256u34POBfYszllX+Dkqrp3Is8qSZKk6c8kqSRJkvppnSQXA8uAXwCfBZ4BnFpVd1bVHcApwF81599YVd9vtj/fnNvWVsA3k1wGvA3YvuvY6VX1+xb3+AydBC7N9+cmUL8kSZJmiDUGHYAkSZLmlN9X1Y7dBUkyxvk1yv59/Ol/+K89yrX/CXyoqk5PsjtwRNexO9sEW1Xfb4b9/zWwelVd3uY6SZIkzSz2JJUkSdKgfRd4aZJ1k8wDXkZnvlKA+Ume3mzvR2cIPcByOkPmAf52lPtuAPyy2T6gZSy3A+sPKzsO+CL2IpUkSZq1TJJKkiRpoKrqIuAY4ALgfOAzVfWT5vBVwAFJLgU2Bo5qyt8DfDTJ94D7R7n1EcCXm3NubRnOfwMvG1q4qSk7AdiITqJUkiRJs1Cqho9gkiRJkgavWW3+a1W1w4DjeAWdRZ5ePcg4JEmS1DvOSSpJkiSNIsl/Ai8E9hh0LJIkSeode5JKkiRJkiRJmtOck1SSJEmSJEnSnGaSVJIkSZIkSdKcZpJUkiRJkiRJ0pxmklSSJEmSJEnSnGaSVJIkSZIkSdKcZpJUkiRJkiRJ0pz2/wEa/0q70yG4yAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.axes ([0.05,0.05,3,0.5])\n",
    "\n",
    "pb = pd.DataFrame(my_arr, columns =['Popularity', 'AverageBudget_adj'])\n",
    "pb.dropna(inplace = True)\n",
    "plt.bar(pb['Popularity'],pb['AverageBudget_adj']);\n",
    "\n",
    "\n",
    "plt.title(\"Mean Budget and  popularity\")\n",
    "plt.xlabel('Popularity')\n",
    "plt.ylabel(\"Average budget of movies\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "___Note 1-b1\n",
    "As you can see above there is no direct relationship between popularity and budget. However, it seems that there is an upward trend between popularity 0 to 5.\n",
    "Lets look at that part closer:\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.axes ([0.05,0.05,3,0.5])\n",
    "lower_than_5 =pb[pb['Popularity']<=5]\n",
    "plt.bar(lower_than_5['Popularity'],lower_than_5['AverageBudget_adj']);\n",
    "plt.title(\"Mean Budget and  popularity\")\n",
    "plt.xlabel('Popularity')\n",
    "plt.ylabel(\"Average budget of movies\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question 1 Conclusion\n",
    "___Average budget of movies increases who has popularity between 0-5. However there is no direct correlation between average budget and corresponding popularity when popularity is bigger than 5\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#  QUESTION 2 \n",
    "## Which companies produces the most popular movies\n",
    "## Is there any relationship between popularity and mean budget_adj, and vote count?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2-a Top 10 Companies who produces the most popular movies on average ( Note that only those with 30+ movies are considered)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "__Having produced 30 films  is set as prerequisite in order to be able to find companies who produced the most popular films\n",
    "Note that there are companies with only 1 films. Considering companies with more than 30 films will be much more fair.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 419,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>popularity</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>budget_adj</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prod_company</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>\"DIA\" Productions GmbH &amp; Co. KG</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100 Feet Productions</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1019 Entertainment</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10th Hole Productions</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11:11 Mediaworks</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 popularity  vote_count  budget_adj\n",
       "prod_company                                                       \n",
       "\"DIA\" Productions GmbH & Co. KG           1           1           1\n",
       "100 Feet Productions                      1           1           1\n",
       "1019 Entertainment                        1           1           1\n",
       "10th Hole Productions                     3           3           3\n",
       "11:11 Mediaworks                          1           1           1"
      ]
     },
     "execution_count": 419,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pc_count=pc_analysis.groupby('prod_company').count()\n",
    "pc_count.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 420,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>popularity</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>budget_adj</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prod_company</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>20th Century Fox</th>\n",
       "      <td>46</td>\n",
       "      <td>46</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Amblin Entertainment</th>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "      <td>52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BBC Films</th>\n",
       "      <td>35</td>\n",
       "      <td>35</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canal+</th>\n",
       "      <td>56</td>\n",
       "      <td>56</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Castle Rock Entertainment</th>\n",
       "      <td>42</td>\n",
       "      <td>42</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           popularity  vote_count  budget_adj\n",
       "prod_company                                                 \n",
       "20th Century Fox                   46          46          46\n",
       "Amblin Entertainment               52          52          52\n",
       "BBC Films                          35          35          35\n",
       "Canal+                             56          56          56\n",
       "Castle Rock Entertainment          42          42          42"
      ]
     },
     "execution_count": 420,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#lets find the companies who produced more than 30 films.\n",
    "\n",
    "movie30 = pc_count.query('popularity>30')\n",
    "movie30.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 421,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "popularity      float64\n",
       "vote_count        int32\n",
       "budget_adj        int32\n",
       "prod_company     object\n",
       "dtype: object"
      ]
     },
     "execution_count": 421,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Filter the companies in pc_analysis dataframe with  30 or movies\n",
    "pc_30 = pc_analysis.loc[pc_analysis.prod_company.isin(movie30.index)]\n",
    "pc_30.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 422,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>popularity</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>budget_adj</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prod_company</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>20th Century Fox</th>\n",
       "      <td>0.623913</td>\n",
       "      <td>266.717391</td>\n",
       "      <td>44.782609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Amblin Entertainment</th>\n",
       "      <td>2.244231</td>\n",
       "      <td>1236.423077</td>\n",
       "      <td>82.596154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BBC Films</th>\n",
       "      <td>0.674286</td>\n",
       "      <td>194.171429</td>\n",
       "      <td>17.628571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canal+</th>\n",
       "      <td>1.175000</td>\n",
       "      <td>485.857143</td>\n",
       "      <td>34.071429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Castle Rock Entertainment</th>\n",
       "      <td>0.976190</td>\n",
       "      <td>404.309524</td>\n",
       "      <td>48.214286</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           popularity   vote_count  budget_adj\n",
       "prod_company                                                  \n",
       "20th Century Fox             0.623913   266.717391   44.782609\n",
       "Amblin Entertainment         2.244231  1236.423077   82.596154\n",
       "BBC Films                    0.674286   194.171429   17.628571\n",
       "Canal+                       1.175000   485.857143   34.071429\n",
       "Castle Rock Entertainment    0.976190   404.309524   48.214286"
      ]
     },
     "execution_count": 422,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Our analysis will be about production companies, therefore lets group by and find their overall performance\n",
    "pc_30.groupby(\"prod_company\").mean().head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 423,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 10 Companies who produces the most popular movies on average :\n",
      "('Legendary Pictures', 'Amblin Entertainment', 'Village Roadshow Pictures', 'Walt Disney Pictures', 'Summit Entertainment', 'New Regency Pictures', 'Dune Entertainment', 'Scott Free Productions', 'Lakeshore Entertainment', 'Lionsgate')\n"
     ]
    }
   ],
   "source": [
    "#pc_30.groupby(\"prod_company\").mean()\n",
    "pop_sort = pc_30.groupby(\"prod_company\").mean().sort_values('popularity',ascending=False)\n",
    "\n",
    "print ( 'Top 10 Companies who produces the most popular movies on average :')\n",
    "print(tuple(pop_sort.head(10).index))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2-b Is there any relationship between popularity and mean budget_adj, and vote count?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 424,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>popularity</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>budget_adj</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prod_company</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>20th Century Fox</th>\n",
       "      <td>0.623913</td>\n",
       "      <td>266.717391</td>\n",
       "      <td>44.782609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Amblin Entertainment</th>\n",
       "      <td>2.244231</td>\n",
       "      <td>1236.423077</td>\n",
       "      <td>82.596154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BBC Films</th>\n",
       "      <td>0.674286</td>\n",
       "      <td>194.171429</td>\n",
       "      <td>17.628571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canal+</th>\n",
       "      <td>1.175000</td>\n",
       "      <td>485.857143</td>\n",
       "      <td>34.071429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Castle Rock Entertainment</th>\n",
       "      <td>0.976190</td>\n",
       "      <td>404.309524</td>\n",
       "      <td>48.214286</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           popularity   vote_count  budget_adj\n",
       "prod_company                                                  \n",
       "20th Century Fox             0.623913   266.717391   44.782609\n",
       "Amblin Entertainment         2.244231  1236.423077   82.596154\n",
       "BBC Films                    0.674286   194.171429   17.628571\n",
       "Canal+                       1.175000   485.857143   34.071429\n",
       "Castle Rock Entertainment    0.976190   404.309524   48.214286"
      ]
     },
     "execution_count": 424,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pop_vs_budget=pc_30.groupby(\"prod_company\").mean()\n",
    "pop_vs_budget.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 425,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plt.subplot(1,3,1)\n",
    "plt.axes ([0.05,0.05,0.6,0.5])\n",
    "plt.title('popularity vs vote_count')\n",
    "plt.scatter(pop_vs_budget['popularity'],pop_vs_budget['vote_count'], color = 'red')\n",
    "\n",
    "#plt.subplot(1,3,2)\n",
    "plt.axes ([0.75,0.05,0.6,0.5])\n",
    "plt.title('budget_adj vs vote_count')\n",
    "plt.scatter(pop_vs_budget['budget_adj'],pop_vs_budget['vote_count'], color = 'blue')\n",
    "\n",
    "#plt.subplot(1,3,3)\n",
    "plt.axes ([1.5,0.05,0.6,0.5])\n",
    "plt.title('popularity vs budget_adj')\n",
    "plt.scatter(pop_vs_budget['budget_adj'],pop_vs_budget['popularity'], color = 'pink');\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "___There is no direct relation ship between Budget - Vote Count and Budget -popularity. But there is an upward trend.\n",
    "Popularity vs vote count seams to be more related, but still there are outsiders, so we cannot make any direct inference froum that data without statistical test which is not the part of this project.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1029"
      ]
     },
     "execution_count": 426,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "10864-9835"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Limitations\n",
    "\n",
    "<br>\n",
    "\n",
    ">Due to null values in production companies, 1029 rows were dropped, which is a considerable number in databese of 10864 rows.\n",
    "\n",
    "<br>\n",
    "\n",
    ">Note that we do not have any info of how popularity is calculated. Therefore no causalty claims were made only correlation was mentioned."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## Conclusions\n",
    "\n",
    "<a id='Assumptions'></a>\n",
    "> **Assumptions**: \n",
    "<br>\n",
    "> ** 1 -Popularity is rounded to one digit.\n",
    "<br>\n",
    "> ** 2 -Budget is converted to millions and rounded to integers. \n",
    "<br>\n",
    "> ** 3 -pc_analysis dataframe is created to be able to analyze Production Companies distinctively, if there are 3  info companies were insterted to production companies cell,they are separeted and  all of them is counted to be a producer of that film. \n",
    "\n",
    "\n",
    "> **Findings**: \n",
    "<br>\n",
    "> **Question1**\n",
    "<br>\n",
    "Both popularity and budget was skewed to right, and therefore southwest of scatterplot was full of unreadable data, therefore we had to make a limitation or grouping to make any inference. \n",
    "<br>\n",
    "So I grouped films according to their popularity(note that popularity was rounded to 1 digit) than found the average budget for corresponding popularity group. There is no relation found in general graph but it is found that there is a positive correlation between popularity and average budget for movies with popularity less than 5\n",
    "<br>\n",
    "<br>\n",
    "> **Question2**\n",
    "There is no direct relation ship between Budget - Vote Count and Budget -popularity. But there is an upward trend.\n",
    "Popularity vs vote count seams are positively correlated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
